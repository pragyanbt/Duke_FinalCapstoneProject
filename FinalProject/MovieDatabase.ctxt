#BlueJ class context
comment0.target=MovieDatabase
comment0.text=\n\ Minimal\ standalone\ MovieDatabase\ for\ BlueJ/local\ testing.\n\ Place\ ratedmoviesfull.csv\ in\ the\ project\ folder.\n\n\ Expected\ columns\ (header,\ case-insensitive)\:\n\ id,title,year,country,genres,director,minutes,poster\n\ (If\ your\ CSV\ uses\ "genre"\ instead\ of\ "genres",\ that's\ handled\ too.)\n
comment1.params=moviefile
comment1.target=void\ initialize(java.lang.String)
comment1.text=\ Load\ (or\ reload)\ movies\ from\ a\ CSV\ file\ the\ first\ time\ this\ is\ called\nfor\ that\ file\ path.\ Safe\ to\ call\ multiple\ times.
comment10.params=id
comment10.target=int\ getMinutes(java.lang.String)
comment11.params=id
comment11.target=java.lang.String\ getPoster(java.lang.String)
comment12.params=f
comment12.target=java.util.ArrayList\ filterBy(Filter)
comment12.text=Return\ IDs\ whose\ movie\ rows\ satisfy\ the\ given\ filter
comment13.params=filename
comment13.target=void\ loadMovies(java.lang.String)
comment14.params=line
comment14.target=java.util.ArrayList\ splitCsvLine(java.lang.String)
comment15.params=parts\ idx
comment15.target=java.lang.String\ get(java.util.ArrayList,\ int)
comment16.params=s\ def
comment16.target=int\ parseIntSafe(java.lang.String,\ int)
comment2.params=
comment2.target=int\ size()
comment3.params=id
comment3.target=boolean\ containsID(java.lang.String)
comment4.params=
comment4.target=java.util.ArrayList\ getMovies()
comment5.params=id
comment5.target=java.lang.String\ getTitle(java.lang.String)
comment6.params=id
comment6.target=int\ getYear(java.lang.String)
comment7.params=id
comment7.target=java.lang.String\ getCountry(java.lang.String)
comment8.params=id
comment8.target=java.lang.String\ getGenres(java.lang.String)
comment9.params=id
comment9.target=java.lang.String\ getDirector(java.lang.String)
numComments=17
