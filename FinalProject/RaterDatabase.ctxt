#BlueJ class context
comment0.target=RaterDatabase
comment0.text=\n\ Static\ database\ of\ Rater\ objects,\ keyed\ by\ rater_id.\n\ CSV\ header\ expected\:\ rater_id,movie_id,rating,time\n\n\ NOTE\:\ Uses\ EfficientRater\ (course\ class)\ which\ implements\ the\ Rater\ interface.\n\ Do\ NOT\ upload\ this\ to\ the\ course\ site\ unless\ your\ instructor\ asked\ you\ to;\n\ the\ site\ already\ has\ RaterDatabase.\ It's\ fine\ for\ local\ BlueJ\ testing.\n
comment1.params=
comment1.target=void\ reset()
comment1.text=Clear\ everything\ (handy\ for\ testing).
comment2.params=filename
comment2.target=void\ initialize(java.lang.String)
comment2.text=Initialize\ from\ a\ CSV\ the\ first\ time\ (or\ when\ filename\ changes).
comment3.params=filename
comment3.target=void\ addRatings(java.lang.String)
comment3.text=Add\ ratings\ from\ a\ CSV\ to\ the\ database\ (does\ not\ clear\ existing).
comment4.params=id
comment4.target=Rater\ getRater(java.lang.String)
comment4.text=Get\ a\ single\ Rater\ by\ id\ (or\ null\ if\ not\ present).
comment5.params=
comment5.target=java.util.ArrayList\ getRaters()
comment5.text=All\ raters\ as\ an\ ArrayList.
comment6.params=
comment6.target=int\ size()
comment6.text=Number\ of\ raters\ in\ the\ DB.
comment7.params=filename
comment7.target=void\ loadRatings(java.lang.String)
comment8.params=raterID\ movieID\ rating
comment8.target=void\ addRaterRating(java.lang.String,\ java.lang.String,\ double)
comment9.params=s
comment9.target=double\ parseDoubleSafe(java.lang.String)
numComments=10
